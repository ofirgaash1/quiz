generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Word {
  id          String @id @default(uuid())
  text        String
  level       String
  translation String

  users    UsersWord[]
  srtFiles WordsSRTFile[]
}

model UsersWord{
  userId String
  wordId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  word Word @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@id([userId, wordId]) // Composite primary key
}

model WordsSRTFile {
  wordId    String
  srtFileId String

  word    Word    @relation(fields: [wordId], references: [id], onDelete: Cascade)
  srtFile SRTFile @relation(fields: [srtFileId], references: [id], onDelete: Cascade)

  @@id([wordId, srtFileId]) // Composite primary key
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique

  srtFiles  UserSRTFile[] // ðŸ‘ˆ Define the opposite relation here
  words UsersWord[]
}

model SRTFile {
  id        String   @id @default(uuid())
  name      String
  season    Int
  episode   Int
  language  String
  filePath  String
  createdAt DateTime @default(now())

  words WordsSRTFile[]
  users UserSRTFile[] // ðŸ‘ˆ Define the opposite relation here
}

model UserSRTFile {
  userId    String
  srtFileId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  srtFile SRTFile @relation(fields: [srtFileId], references: [id], onDelete: Cascade)

  @@id([userId, srtFileId]) // Composite primary key
}
